name: Release

permissions:
  pull-requests: write
  contents: write

on:
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string
      monorepo:
        default: false
        description: "Set mode to 'monorepo' or 'single'."
        required: false
        type: boolean
    secrets:
      GH_TOKEN:
        description: 'Automatically generated token that GitHub provides for every workflow run'
        required: true
      NPM_TOKEN:
        description: 'Token used to publish the package on NPM registry'
        required: true

jobs:
  Checks:
    runs-on: ubuntu-latest
    steps:
      - name: Check Branch Name
        run: |
          echo "Branch Name: ${{ inputs.branch_name }}"

  release:
    runs-on: ubuntu-latest
    if: |
      (
        inputs.branch_name == 'main' ||
        inputs.branch_name == 'alpha' ||
        inputs.branch_name == 'beta' ||
        inputs.branch_name == 'develop' ||
        inputs.branch_name == 'pre'
      )
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Install
        uses: ./.github/actions/install
        with:
          monorepo: ${{ inputs.monorepo }}

      - name: Build (monorepo)
        if: ${{ inputs.monorepo == 'true' }}
        shell: bash
        run: |
          pnpm exec turbo run build

      - name: Build
        if: ${{ inputs.monorepo != 'true' }}
        shell: bash
        run: |
          pnpm build

      - name: Release (monorepo)
        id: semantic_release
        if: ${{ inputs.monorepo == 'true' }}
        shell: bash
        run: pnpm semantic-release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Release
        if: ${{ inputs.monorepo != 'true' }}
        shell: bash
        run: npx semantic-release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  sync-develop:
    needs: release
    runs-on: ubuntu-latest
    if: inputs.branch_name == 'main'
    steps:
      - name: Checkout all branches
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Set git user
        run: |
          # strip anything but alphanumerics, dash, underscore, dot
          actor=$(echo "${GITHUB_ACTOR}" | sed 's/[^A-Za-z0-9._-]//g')
          git config user.name  "$actor"
          git config user.email "$actor@users.noreply.github.com"

      - name: Squashâ€‘merge main into develop
        run: |
          git fetch origin main
          git checkout develop
          git merge --squash origin/main
          git commit -m "chore(ci): sync develop with main after release"

      - name: Push develop
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: git push origin develop
